services:
  minio:
    container_name: minio-s3
    image: minio/minio
    environment:
      MINIO_ROOT_USER: AKIAIOSFODNN7EXAMPLE
      MINIO_ROOT_PASSWORD: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    command: server /data --console-address ":9001"
    networks:
      - minio-s3-network
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 3s
      timeout: 3s
      retries: 5
      start_period: 3s

  createbuckets:
    image: minio/minio
    depends_on:
      minio:
        condition: service_healthy
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set dockerminio http://minio:9000 AKIAIOSFODNN7EXAMPLE wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY;
      /usr/bin/mc mb dockerminio/test-bucket;
      exit 0;
      "
    networks:
      - minio-s3-network

  s3-test-client-minio:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: s3-test-client-minio
    depends_on:
      minio:
        condition: service_healthy
      createbuckets:
        condition: service_completed_successfully
    environment:
      - S3_ENDPOINT=http://minio:9000
      - DYNAMODB_ENDPOINT=http://minio:9000
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
      - AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    command: bun run test-s3.ts
    networks:
      - minio-s3-network

networks:
  minio-s3-network:
    driver: bridge
